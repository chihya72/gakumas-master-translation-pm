name: Combined Release Workflow

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
  repository_dispatch:
    types: [data-updated]

jobs:
  build:
    runs-on: ubuntu-latest
    concurrency:
      group: release-${{ github.event_name == 'repository_dispatch' && 'data-update' || github.ref }}
      cancel-in-progress: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'repository_dispatch' && 'main' || github.ref }}

      - name: 复制需要的文件到目标目录
        run: |
          mkdir -p gakumas-local/local-files/masterTrans
          cp -r data/*.json gakumas-local/local-files/masterTrans/

      - name: Extract B Commit Info
        if: ${{ github.event_name == 'repository_dispatch' }}
        id: extract_b_info
        run: |
          echo "b_commit_sha=${{ github.event.client_payload.b_commit_sha }}" >> $GITHUB_OUTPUT
          echo "b_commit_msg<<EOF" >> $GITHUB_OUTPUT
          echo "${{ github.event.client_payload.b_commit_msg }}" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Prepare directories
        run: |
          rm -rf gakumas-local/local-files/resource/*
          mkdir -p gakumas-local/local-files/resource
          tree gakumas-local/local-files -L 2

      - name: Clone translation data (optimized)
        run: |
          # 使用深度为1的克隆以减少下载量
          if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
            git clone --depth 1 --filter=blob:none --no-checkout https://github.com/chihya72/Gakumas-Auto-Translate.git temp-repo
            cd temp-repo
            git sparse-checkout init --cone
            git sparse-checkout set data
            git checkout HEAD
            cd ..
          else
            git clone --branch ${{ github.ref_name }} --depth 1 --filter=blob:none --no-checkout https://github.com/chihya72/Gakumas-Auto-Translate.git temp-repo
            cd temp-repo
            git sparse-checkout init --cone
            git sparse-checkout set data
            git checkout HEAD
            cd ..
          fi
          
          # 输出统计信息
          echo "Data files in repository:"
          find temp-repo/data -type f | wc -l

      - name: Copy translation data
        run: |
          # 复制所有数据文件
          cp -R temp-repo/data/* gakumas-local/local-files/resource/
          
          # 输出统计信息
          echo "Files copied to destination:"
          find gakumas-local/local-files/resource -type f | wc -l
          
          # 清理临时仓库
          rm -rf temp-repo

      - name: Create ZIP archive
        run: |
          # 确保安装 zip 和 unzip
          sudo apt-get update
          sudo apt-get install -y zip unzip
          
          # 显示文件统计信息
          echo "文件数量统计:"
          find gakumas-local/local-files/resource -type f | wc -l
          
          # 创建一个优化的ZIP文件
          zip -r gakumas-local.zip gakumas-local/ -x "*.git*" "*.github*"
          
          # 显示ZIP大小
          du -h gakumas-local.zip
          
          # 验证ZIP内容
          unzip -l gakumas-local.zip | grep -m 10 'gakumas-local/local-files/resource'

      - name: Generate Release Metadata
        id: set_release_name
        run: |
          if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
            SHORT_SHA="${{ steps.extract_b_info.outputs.b_commit_sha }}"
            SHORT_SHA=${SHORT_SHA:0:7}
            RAW_MSG="${{ steps.extract_b_info.outputs.b_commit_msg }}"
            
            # 清理标题
            CLEAN_TITLE=$(echo "$RAW_MSG" | tr '\n' ' ' | cut -c -50 | sed 's/["""*]//g')
            
            # 构造带链接的Markdown
            COMMIT_URL="https://github.com/chihya72/Gakumas-Auto-Translate/commit/${{ steps.extract_b_info.outputs.b_commit_sha }}"
            
            echo "name=Data Update: ${CLEAN_TITLE} (Gakumas-Auto-Translate@${SHORT_SHA})" >> $GITHUB_OUTPUT
            echo "body<<EOF" >> $GITHUB_OUTPUT
            echo "**Triggered by [Gakumas-Auto-Translate Commit](${COMMIT_URL}):**" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            echo '```' >> $GITHUB_OUTPUT
            echo "$RAW_MSG" >> $GITHUB_OUTPUT
            echo '```' >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "name=Release ${{ github.ref_name }}" >> $GITHUB_OUTPUT
            echo "body=Standard versioned release" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: gakumas-local.zip
          name: ${{ steps.set_release_name.outputs.name }}
          body: ${{ steps.set_release_name.outputs.body }}
          tag_name: ${{ github.event_name == 'repository_dispatch' && '' || github.ref_name }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
